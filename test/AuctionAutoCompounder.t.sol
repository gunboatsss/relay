// SPDX-License-Identifier: BUSL-1.1
pragma solidity 0.8.19;

import "src/Relay.sol";
import "src/Registry.sol";
import "src/auctionAutoCompounder/AuctionAutoCompounder.sol";
import "src/Optimizer.sol";
import "src/auctionAutoCompounder/AuctionAutoCompounderFactory.sol";

import "@velodrome/test/BaseTest.sol";

contract AuctionAutoCompounderTest is BaseTest {
    bytes AUCTION_FACTORY_BYTECODE = hex'608060405234801561001057600080fd5b50600436106100cf5760003560e01c806350d9d4721161008c5780638ed5e3a3116100665780638ed5e3a31461018d578063ca43205d146101a0578063cbd2bdfd146101b3578063ed3aed79146101c857600080fd5b806350d9d47214610168578063571a26a0146101705780637d97597d1461018357600080fd5b80630935861e146100d4578063165a533d1461010457806319351c8d1461011757806322ebb2731461012f578063336558831461014257806346c715fa14610155575b600080fd5b6100e76100e23660046104b0565b6101d2565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e76101123660046104cb565b6101f2565b610121620f424081565b6040519081526020016100fb565b6100e761013d366004610516565b610211565b6100e761015036600461056b565b61022e565b6000546100e7906001600160a01b031681565b600154610121565b6100e761017e3660046105ca565b610249565b6101216201518081565b6100e761019b3660046105e3565b610273565b6100e76101ae366004610626565b610294565b6101bb6102b4565b6040516100fb9190610659565b6101216206978081565b60006101ec826000336201518062069780620f4240610316565b92915050565b60006102088585858562069780620f4240610316565b95945050505050565b60006102248686868686620f4240610316565b9695505050505050565b600061023e878787878787610316565b979650505050505050565b6001818154811061025957600080fd5b6000918252602090912001546001600160a01b0316905081565b600061028c8484846201518062069780620f4240610316565b949350505050565b60006102ad8383336201518062069780620f4240610316565b9392505050565b6060600180548060200260200160405190810160405280929190818152602001828054801561030c57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102ee575b5050505050905090565b6000610320610427565b6040516339466de560e11b81526001600160a01b03898116600483015288811660248301528781166044830152606482018790526084820186905260a482018590529192509082169063728cdbca9060c401600060405180830381600087803b15801561038c57600080fd5b505af11580156103a0573d6000803e3d6000fd5b505060018054808201825560009182527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b03868116918217909255604051918c16945092507fbc4082f61ad2c1141396485591a31655629009271d5910d28313c0460ced44db9190a39695505050505050565b6000805461043d906001600160a01b0316610442565b905090565b6000808260601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f0949350505050565b80356001600160a01b03811681146104ab57600080fd5b919050565b6000602082840312156104c257600080fd5b6102ad82610494565b600080600080608085870312156104e157600080fd5b6104ea85610494565b93506104f860208601610494565b925061050660408601610494565b9396929550929360600135925050565b600080600080600060a0868803121561052e57600080fd5b61053786610494565b945061054560208701610494565b935061055360408701610494565b94979396509394606081013594506080013592915050565b60008060008060008060c0878903121561058457600080fd5b61058d87610494565b955061059b60208801610494565b94506105a960408801610494565b9350606087013592506080870135915060a087013590509295509295509295565b6000602082840312156105dc57600080fd5b5035919050565b6000806000606084860312156105f857600080fd5b61060184610494565b925061060f60208501610494565b915061061d60408501610494565b90509250925092565b6000806040838503121561063957600080fd5b61064283610494565b915061065060208401610494565b90509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561069a5783516001600160a01b031683529284019291840191600101610675565b5090969550505050505056fea2646970667358221220fc9ab8b5ef8dd0c8b02910c919c69663d5c799586dc2218a043fc6ce0bc26c5b64736f6c63430008120033';

    uint256 tokenId;
    uint256 mTokenId;

    AuctionAutoCompounderFactory auctionAutoCompounderFactory;
    AuctionAutoCompounder auctionAutoCompounder;
    Optimizer optimizer;
    Registry keeperRegistry;
    Registry optimizerRegistry;
    LockedManagedReward lockedManagedReward;
    FreeManagedReward freeManagedReward;

    address[] bribes;
    address[] fees;
    address[][] tokensToClaim;
    address[] tokensToSweep;
    address[] recipients;

    constructor() {
        deploymentType = Deployment.FORK;
    }

    function _setUp() public override {
        vm.etch(0xE6aB098E8582178A76DC80d55ca304d1Dec11AD8, AUCTION_FACTORY_BYTECODE);
        vm.etch(0x12e3250114a4a8439f8feDcCD0CfCc41a4e7b572, hex'');
        vm.store(0xE6aB098E8582178A76DC80d55ca304d1Dec11AD8, bytes32(0), bytes32(uint256(uint160(0x12e3250114a4a8439f8feDcCD0CfCc41a4e7b572))));
        // create managed veNFT
        vm.prank(escrow.allowedManager());
        mTokenId = escrow.createManagedLockFor(address(owner));
        lockedManagedReward = LockedManagedReward(escrow.managedToLocked(mTokenId));
        freeManagedReward = FreeManagedReward(escrow.managedToFree(mTokenId));

        vm.startPrank(address(owner));

        // Create normal veNFT and deposit into managed
        deal(address(VELO), address(owner), TOKEN_1);
        VELO.approve(address(escrow), TOKEN_1);
        tokenId = escrow.createLock(TOKEN_1, MAXTIME);

        skipToNextEpoch(1 hours + 1);
        voter.depositManaged(tokenId, mTokenId);

        // Create auto compounder
        optimizer = new Optimizer(
            address(USDC),
            address(WETH),
            address(FRAX), // OP
            address(VELO),
            address(factory),
            address(router)
        );
        optimizerRegistry = new Registry(new address[](0));
        optimizerRegistry.approve(address(optimizer));
        keeperRegistry = new Registry(new address[](0));
        auctionAutoCompounderFactory = new AuctionAutoCompounderFactory(
            address(voter),
            address(router),
            address(keeperRegistry),
            address(optimizerRegistry),
            address(optimizer),
            new address[](0)
        );
        escrow.approve(address(auctionAutoCompounderFactory), mTokenId);
        auctionAutoCompounder = AuctionAutoCompounder(auctionAutoCompounderFactory.createRelay(address(owner), mTokenId, "", new bytes(0)));

        skipToNextEpoch(1 hours + 1);

        vm.stopPrank();

        // Add the owner as a keeper
        vm.prank(escrow.team());
        keeperRegistry.approve(address(owner));

        // Create a VELO pool for USDC, WETH, and FRAX (seen as OP in Optimizer)
        deal(address(VELO), address(owner), TOKEN_100K * 3);
        deal(address(WETH), address(owner), TOKEN_1 * 3);

        // @dev these pools have a higher VELO price value than v1 pools
        _createPoolAndSimulateSwaps(address(USDC), address(VELO), USDC_1, TOKEN_1, address(USDC), 10, 3);
        _createPoolAndSimulateSwaps(address(WETH), address(VELO), TOKEN_1, TOKEN_100K, address(VELO), 1e6, 3);
        _createPoolAndSimulateSwaps(address(FRAX), address(VELO), TOKEN_1, TOKEN_1, address(VELO), 1e6, 3);
        _createPoolAndSimulateSwaps(address(FRAX), address(DAI), TOKEN_1, TOKEN_1, address(FRAX), 1e6, 3);

        // skip to last day where claiming becomes public
        skipToNextEpoch(6 days + 1);
    }

    function _createPoolAndSimulateSwaps(
        address token1,
        address token2,
        uint256 liquidity1,
        uint256 liquidity2,
        address tokenIn,
        uint256 amountSwapped,
        uint256 numSwapped
    ) internal {
        address tokenOut = tokenIn == token1 ? token2 : token1;
        _addLiquidityToPool(address(owner), address(router), token1, token2, false, liquidity1, liquidity2);

        IRouter.Route[] memory routes = new IRouter.Route[](1);

        // for every hour, simulate a swap to add an observation
        for (uint256 i = 0; i < numSwapped; i++) {
            skipAndRoll(1 hours);
            routes[0] = IRouter.Route(tokenIn, tokenOut, false, address(0));

            IERC20(tokenIn).approve(address(router), amountSwapped);
            router.swapExactTokensForTokens(amountSwapped, 0, routes, address(owner), block.timestamp);
        }
    }

    function testKeeperLastRunSetup() public {
        assertEq(auctionAutoCompounder.keeperLastRun(), 0);
    }

    function testOptimizerSetup() public {
        assertFalse(address(auctionAutoCompounder.optimizer()) == address(0));
    }

    function testManagedTokenID() public {
        assertEq(auctionAutoCompounder.mTokenId(), mTokenId);
        assertEq(escrow.ownerOf(mTokenId), address(auctionAutoCompounder));
        assertTrue(escrow.escrowType(mTokenId) == IVotingEscrow.EscrowType.MANAGED);
    }

    function testCannotInitializeIfAlreadyInitialized() external {
        vm.expectRevert("Initializable: contract is already initialized");
        auctionAutoCompounder.initialize(1);
    }

    function testCannotInitializeTokenNotOwned() external {
        AuctionAutoCompounder comp = new AuctionAutoCompounder(
            address(voter),
            address(owner),
            "",
            address(router),
            address(optimizer),
            address(auctionAutoCompounderFactory)
        );
        uint256 _mTokenId = escrow.createManagedLockFor(address(owner));
        vm.prank(escrow.allowedManager());
        vm.expectRevert(IRelay.ManagedTokenNotOwned.selector);
        comp.initialize(_mTokenId);
    }

    function testCannotInitializeTokenNotManaged() external {
        AuctionAutoCompounder comp = new AuctionAutoCompounder(
            address(voter),
            address(owner),
            "",
            address(router),
            address(optimizer),
            address(auctionAutoCompounderFactory)
        );
        vm.prank(escrow.allowedManager());
        vm.expectRevert(IRelay.TokenIdNotManaged.selector);
        comp.initialize(2);
    }

    function testCannotSwapIfNoRouteFound() public {
        // Create a new pool with liquidity that doesn't swap into VELO
        IERC20 tokenA = IERC20(new MockERC20("Token A", "A", 18));
        IERC20 tokenB = IERC20(new MockERC20("Token B", "B", 18));
        deal(address(tokenA), address(owner), TOKEN_1 * 2, true);
        deal(address(tokenB), address(owner), TOKEN_1 * 2, true);
        _createPoolAndSimulateSwaps(address(tokenA), address(tokenB), TOKEN_1, TOKEN_1, address(tokenA), 1e6, 3);

        // give rewards to the auctionAutoCompounder
        deal(address(tokenA), address(auctionAutoCompounder), 1e6);

        // Attempt swapping into VELO - should revert
        address tokenToSwap = address(tokenA);
        uint256 slippage = 0;
        IRouter.Route[] memory optionalRoute = new IRouter.Route[](0);
        vm.expectRevert(IAutoCompounder.NoRouteFound.selector);
        auctionAutoCompounder.swapTokenToVELOWithOptionalRoute(tokenToSwap, slippage, optionalRoute);

        // Cannot swap for a token that doesn't have a pool
        IERC20 tokenC = IERC20(new MockERC20("Token C", "C", 18));
        deal(address(tokenC), address(auctionAutoCompounder), 1e6);

        tokenToSwap = address(tokenC);

        // Attempt swapping into VELO - should revert
        vm.expectRevert(IAutoCompounder.NoRouteFound.selector);
        auctionAutoCompounder.swapTokenToVELOWithOptionalRoute(tokenToSwap, slippage, optionalRoute);
    }

    function testSwapToVELOAndCompoundIfCompoundRewardAmount() public {
        // Deal USDC, FRAX, and DAI to autocompounder to simulate earning bribes
        // NOTE: the low amount of bribe rewards leads to receiving 1% of the reward amount
        deal(address(USDC), address(auctionAutoCompounder), 1e2);
        deal(address(FRAX), address(auctionAutoCompounder), 1e6);
        deal(address(DAI), address(auctionAutoCompounder), 1e6);

        uint256 balanceNFTBefore = escrow.balanceOfNFT(mTokenId);
        uint256 balanceVELOBefore = VELO.balanceOf(address(owner4));

        // Random user calls swapToVELO() for each token and then claims reward
        vm.startPrank(address(owner4));
        uint256 slippage = 500;
        IRouter.Route[] memory optionalRoute = new IRouter.Route[](0);
        bytes[] memory calls = new bytes[](4);
        calls[0] = abi.encodeCall(
            auctionAutoCompounder.swapTokenToVELOWithOptionalRoute,
            (address(USDC), slippage, optionalRoute)
        );
        calls[1] = abi.encodeCall(
            auctionAutoCompounder.swapTokenToVELOWithOptionalRoute,
            (address(FRAX), slippage, optionalRoute)
        );
        calls[2] = abi.encodeCall(
            auctionAutoCompounder.swapTokenToVELOWithOptionalRoute,
            (address(DAI), slippage, optionalRoute)
        );
        calls[3] = abi.encodeWithSelector(auctionAutoCompounder.rewardAndCompound.selector);
        auctionAutoCompounder.multicall(calls);

        // USDC and FRAX converted even though they already have a direct pair to VELO
        // DAI converted without a direct pair to VELO
        assertEq(USDC.balanceOf(address(auctionAutoCompounder)), 0);
        assertEq(FRAX.balanceOf(address(auctionAutoCompounder)), 0);
        assertEq(DAI.balanceOf(address(auctionAutoCompounder)), 0);
        assertEq(VELO.balanceOf(address(auctionAutoCompounder)), 0);

        uint256 rewardAmountToNFT = escrow.balanceOfNFT(mTokenId) - balanceNFTBefore;
        uint256 rewardAmountToCaller = VELO.balanceOf(address(owner4)) - balanceVELOBefore;

        assertGt(rewardAmountToNFT, 0);
        assertGt(rewardAmountToCaller, 0);
        assertLt(rewardAmountToCaller, auctionAutoCompounderFactory.rewardAmount());

        // total reward is 100x what caller received - as caller received 1% the total reward
        assertEq((rewardAmountToNFT + rewardAmountToCaller) / 100, rewardAmountToCaller);
    }

    function testSwapToVELOAndCompoundIfFactoryRewardAmount() public {
        // Adjust the factory reward rate to a lower VELO to trigger the rewardAmount.
        // NOTE: this will not be needed in prod as more than 0.00000001 DAI etc. will
        // be compounded at one time
        vm.prank(escrow.team());
        auctionAutoCompounderFactory.setRewardAmount(1e17);

        // Deal USDC, WETH, and DAI to autocompounder to simulate earning bribe rewards
        // NOTE; the difference here is WETH for a higher amount of VELO swapped
        deal(address(USDC), address(auctionAutoCompounder), 1e3);
        deal(address(WETH), address(auctionAutoCompounder), 1e15);
        deal(address(DAI), address(auctionAutoCompounder), 1e6);

        uint256 balanceVELOCallerBefore = VELO.balanceOf(address(owner4));
        uint256 balanceNFTBefore = escrow.balanceOfNFT(mTokenId);

        // Random user calls swapToVELO() for each token and then claims reward
        vm.startPrank(address(owner4));
        uint256 slippage = 500;
        IRouter.Route[] memory optionalRoute = new IRouter.Route[](0);
        bytes[] memory calls = new bytes[](4);
        calls[0] = abi.encodeCall(
            auctionAutoCompounder.swapTokenToVELOWithOptionalRoute,
            (address(USDC), slippage, optionalRoute)
        );
        calls[1] = abi.encodeCall(
            auctionAutoCompounder.swapTokenToVELOWithOptionalRoute,
            (address(WETH), slippage, optionalRoute)
        );
        calls[2] = abi.encodeCall(
            auctionAutoCompounder.swapTokenToVELOWithOptionalRoute,
            (address(DAI), slippage, optionalRoute)
        );
        calls[3] = abi.encodeWithSelector(auctionAutoCompounder.rewardAndCompound.selector);
        auctionAutoCompounder.multicall(calls);

        // USDC and FRAX converted even though they already have a direct pair to VELO
        // DAI converted without a direct pair to VELO
        assertEq(USDC.balanceOf(address(auctionAutoCompounder)), 0);
        assertEq(WETH.balanceOf(address(auctionAutoCompounder)), 0);
        assertEq(DAI.balanceOf(address(auctionAutoCompounder)), 0);
        assertEq(VELO.balanceOf(address(auctionAutoCompounder)), 0);

        // Compounded into the mTokenId and caller has received a refund equal to the factory rewardAmount
        assertEq(VELO.balanceOf(address(owner4)), balanceVELOCallerBefore + auctionAutoCompounderFactory.rewardAmount());
        assertGt(escrow.balanceOfNFT(mTokenId), balanceNFTBefore);
    }

    function testClaimAndMulticallClaimRebaseOnly() public {
        address[] memory pools = new address[](2);
        pools[0] = address(pool);
        pools[1] = address(pool2);
        uint256[] memory weights = new uint256[](2);
        weights[0] = 1;
        weights[1] = 1;

        auctionAutoCompounder.vote(pools, weights);

        skipToNextEpoch(6 days + 1);
        minter.updatePeriod();

        uint256 claimable = distributor.claimable(mTokenId);
        assertGt(distributor.claimable(mTokenId), 0);

        uint256 balanceNFTBefore = escrow.balanceOfNFT(mTokenId);
        bytes[] memory calls = new bytes[](1);
        calls[0] = abi.encodeCall(auctionAutoCompounder.claimBribes, (bribes, tokensToClaim));
        auctionAutoCompounder.multicall(calls);
        assertEq(escrow.balanceOfNFT(mTokenId), balanceNFTBefore + claimable);
    }

    function testRewardAndCompoundOnlyExistingVELOBalance() public {
        deal(address(VELO), address(auctionAutoCompounder), 1e18);

        uint256 balanceNFTBefore = escrow.balanceOfNFT(mTokenId);

        vm.prank(address(owner2));
        auctionAutoCompounder.rewardAndCompound();

        // mTokenId has received the full VELO balance from the auctionAutoCompounder - meaning
        // the VELO has been directly compounded without a swap (minus fee)
        assertEq(escrow.balanceOfNFT(mTokenId), balanceNFTBefore + 1e18 - 1e16);
        assertEq(VELO.balanceOf(address(auctionAutoCompounder)), 0);
    }

    function testSwapTokenToVELOWithOptionalRouteAndCompoundIfBetterRate() public {
        // create a new pool with
        //  - liquidity of the token swapped to the mock token
        //  - liquidity of the mock token to VELO to return a lot of VELO
        // And add mock token as a high liquidity token
        MockERC20 mockToken = new MockERC20("Mock Token", "MOCK", 18);
        auctionAutoCompounderFactory.addHighLiquidityToken(address(mockToken));
        deal(address(mockToken), address(owner), TOKEN_1 * 3);
        deal(address(VELO), address(owner), TOKEN_100M + TOKEN_1 * 3);

        _createPoolAndSimulateSwaps(address(mockToken), address(FRAX), TOKEN_1, TOKEN_1, address(FRAX), 1e6, 3);
        _createPoolAndSimulateSwaps(address(mockToken), address(VELO), TOKEN_1, TOKEN_100M, address(VELO), TOKEN_1, 3);

        // simulate reward
        deal(address(FRAX), address(auctionAutoCompounder), 1e6);

        IRouter.Route[] memory optionalRoute = new IRouter.Route[](2);
        optionalRoute[0] = IRouter.Route(address(FRAX), address(mockToken), false, address(0));
        optionalRoute[1] = IRouter.Route(address(mockToken), address(VELO), false, address(0));

        address tokenToSwap = address(FRAX);
        uint256 slippage = 500;

        uint256[] memory amountsOut = router.getAmountsOut(1e6, optionalRoute);
        uint256 amountOut = amountsOut[amountsOut.length - 1];
        uint256 balanceOwnerBefore = VELO.balanceOf(address(owner));
        uint256 balanceNFTBefore = escrow.balanceOfNFT(mTokenId);

        bytes[] memory calls = new bytes[](2);
        calls[0] = abi.encodeCall(
            auctionAutoCompounder.swapTokenToVELOWithOptionalRoute,
            (tokenToSwap, slippage, optionalRoute)
        );
        calls[1] = abi.encodeWithSelector(auctionAutoCompounder.rewardAndCompound.selector);
        auctionAutoCompounder.multicall(calls);

        // validate the amount received by caller and balance increased to (m)veNFT equal
        // the amount out of the optionalRoute over the Optimizer suggested route
        uint256 balanceOwnerDelta = VELO.balanceOf(address(owner)) - balanceOwnerBefore;
        uint256 balanceNFTDelta = escrow.balanceOfNFT(mTokenId) - balanceNFTBefore;
        assertEq(balanceOwnerDelta + balanceNFTDelta, amountOut);
    }

    function testSwapTokenToVELOWithOptionalRouteAndCompoundIfBetterRateFromHighLiquidityToken() public {
        // create a new pool with
        //  - liquidity of the token swapped to the mock token
        //  - liquidity of the mock token to VELO to return a lot of VELO
        // Add mock token and token swapping from as high liquidity tokens
        MockERC20 mockToken = new MockERC20("Mock Token", "MOCK", 18);
        auctionAutoCompounderFactory.addHighLiquidityToken(address(mockToken));
        auctionAutoCompounderFactory.addHighLiquidityToken(address(FRAX));
        deal(address(mockToken), address(owner), TOKEN_1 * 3);
        deal(address(VELO), address(owner), TOKEN_100M + TOKEN_1 * 3);

        _createPoolAndSimulateSwaps(address(mockToken), address(FRAX), TOKEN_1, TOKEN_1, address(FRAX), 1e6, 3);
        _createPoolAndSimulateSwaps(address(mockToken), address(VELO), TOKEN_1, TOKEN_100M, address(VELO), TOKEN_1, 3);

        // simulate reward
        deal(address(FRAX), address(auctionAutoCompounder), 1e6);

        address tokenToSwap = address(FRAX);
        uint256 slippage = 500;
        IRouter.Route[] memory optionalRoute = new IRouter.Route[](2);
        optionalRoute[0] = IRouter.Route(address(FRAX), address(mockToken), false, address(0));
        optionalRoute[1] = IRouter.Route(address(mockToken), address(VELO), false, address(0));

        uint256[] memory amountsOut = router.getAmountsOut(1e6, optionalRoute);
        uint256 amountOut = amountsOut[amountsOut.length - 1];
        uint256 balanceOwnerBefore = VELO.balanceOf(address(owner));
        uint256 balanceNFTBefore = escrow.balanceOfNFT(mTokenId);

        bytes[] memory calls = new bytes[](2);
        calls[0] = abi.encodeCall(
            auctionAutoCompounder.swapTokenToVELOWithOptionalRoute,
            (tokenToSwap, slippage, optionalRoute)
        );
        calls[1] = abi.encodeWithSelector(auctionAutoCompounder.rewardAndCompound.selector);
        auctionAutoCompounder.multicall(calls);

        // validate the amount received by caller and balance increased to (m)veNFT equal
        // the amount out of the optionalRoute over the Optimizer suggested route
        uint256 balanceOwnerDelta = VELO.balanceOf(address(owner)) - balanceOwnerBefore;
        uint256 balanceNFTDelta = escrow.balanceOfNFT(mTokenId) - balanceNFTBefore;
        assertEq(balanceOwnerDelta + balanceNFTDelta, amountOut);
    }

    function testCannotSwapTokenToVELOWithOptionalRouteIfDoesNotUseHighLiquidityToken() public {
        // create a new pool with
        //  - liquidity of the token swapped to the mock token
        //  - liquidity of the mock token to VELO to return a lot of VELO
        // Mock Token is not added as a high liquidity token, so will revert
        MockERC20 mockToken = new MockERC20("Mock Token", "MOCK", 18);
        deal(address(mockToken), address(owner), TOKEN_1 * 3);
        deal(address(VELO), address(owner), TOKEN_100M + TOKEN_1 * 3);

        _createPoolAndSimulateSwaps(address(mockToken), address(FRAX), TOKEN_1, TOKEN_1, address(FRAX), 1e6, 3);
        _createPoolAndSimulateSwaps(address(mockToken), address(VELO), TOKEN_1, TOKEN_100M, address(VELO), TOKEN_1, 3);

        // simulate reward
        deal(address(FRAX), address(auctionAutoCompounder), 1e6);

        address tokenToSwap = address(FRAX);
        uint256 slippage = 500;
        IRouter.Route[] memory optionalRoute = new IRouter.Route[](2);
        optionalRoute[0] = IRouter.Route(address(FRAX), address(mockToken), false, address(0));
        optionalRoute[1] = IRouter.Route(address(mockToken), address(VELO), false, address(0));

        vm.expectRevert(IAutoCompounder.NotHighLiquidityToken.selector);
        auctionAutoCompounder.swapTokenToVELOWithOptionalRoute(tokenToSwap, slippage, optionalRoute);
    }

    function testSwapTokenToVELOWithOptionalRouteAndCompoundIfOnlyRoute() public {
        // create a new pool with
        //  - liquidity of the mock token to VELO
        // For a token that does NOT have a route supported by Optimizer
        MockERC20 mockToken = new MockERC20("Mock Token", "MOCK", 18);
        deal(address(mockToken), address(owner), TOKEN_1 * 3);
        deal(address(VELO), address(owner), TOKEN_100M + TOKEN_1 * 3);

        _createPoolAndSimulateSwaps(address(mockToken), address(VELO), TOKEN_1, TOKEN_100M, address(VELO), TOKEN_1, 3);

        // simulate reward
        deal(address(mockToken), address(auctionAutoCompounder), 1e6);

        address tokenToSwap = address(mockToken);
        uint256 slippage = 500;
        IRouter.Route[] memory optionalRoute = new IRouter.Route[](1);
        optionalRoute[0] = IRouter.Route(address(mockToken), address(VELO), false, address(0));

        uint256[] memory amountsOut = router.getAmountsOut(1e6, optionalRoute);
        uint256 amountOut = amountsOut[amountsOut.length - 1];
        uint256 balanceOwnerBefore = VELO.balanceOf(address(owner));
        uint256 balanceNFTBefore = escrow.balanceOfNFT(mTokenId);

        bytes[] memory calls = new bytes[](2);
        calls[0] = abi.encodeCall(
            auctionAutoCompounder.swapTokenToVELOWithOptionalRoute,
            (tokenToSwap, slippage, optionalRoute)
        );
        calls[1] = abi.encodeWithSelector(auctionAutoCompounder.rewardAndCompound.selector);
        auctionAutoCompounder.multicall(calls);

        // validate the amount received by caller and balance increased to (m)veNFT equal
        // the amount out of the optionalRoute
        uint256 balanceOwnerDelta = VELO.balanceOf(address(owner)) - balanceOwnerBefore;
        uint256 balanceNFTDelta = escrow.balanceOfNFT(mTokenId) - balanceNFTBefore;
        assertEq(balanceOwnerDelta + balanceNFTDelta, amountOut);
    }

    function testIncreaseAmount() public {
        uint256 amount = TOKEN_1;
        deal(address(VELO), address(owner), amount);
        VELO.approve(address(auctionAutoCompounder), amount);

        uint256 balanceBefore = escrow.balanceOfNFT(mTokenId);
        uint256 supplyBefore = escrow.totalSupply();

        auctionAutoCompounder.increaseAmount(amount);

        assertEq(escrow.balanceOfNFT(mTokenId), balanceBefore + amount);
        assertEq(escrow.totalSupply(), supplyBefore + amount);
    }

    function testVote() public {
        address[] memory poolVote = new address[](1);
        uint256[] memory weights = new uint256[](1);
        poolVote[0] = address(pool2);
        weights[0] = 1;

        assertFalse(escrow.voted(mTokenId));

        auctionAutoCompounder.vote(poolVote, weights);

        assertEq(auctionAutoCompounder.keeperLastRun(), block.timestamp);
        assertTrue(escrow.voted(mTokenId));
        assertEq(voter.weights(address(pool2)), escrow.balanceOfNFT(mTokenId));
        assertEq(voter.votes(mTokenId, address(pool2)), escrow.balanceOfNFT(mTokenId));
        assertEq(voter.poolVote(mTokenId, 0), address(pool2));
    }

    function testSwapTokenToVELOAndCompoundKeeper() public {
        address randomKeeper = address(0x123321);
        keeperRegistry.approve(address(randomKeeper));

        uint256 amount = TOKEN_1 / 100;
        deal(address(WETH), address(auctionAutoCompounder), amount);

        uint256 balanceBefore = escrow.balanceOfNFT(mTokenId);
        uint256 veloBalanceBefore = VELO.balanceOf(address(owner));

        IRouter.Route[] memory routes = new IRouter.Route[](1);
        routes[0] = IRouter.Route(address(WETH), address(VELO), false, address(0));
        uint256[] memory amountsOut = router.getAmountsOut(amount, routes);
        uint256 amountOut = amountsOut[amountsOut.length - 1];
        assertGt(amountOut, 0);

        bytes[] memory calls = new bytes[](2);
        uint256 slippage = 500;
        calls[0] = abi.encodeCall(auctionAutoCompounder.swapTokenToVELOWithOptionalRoute, (address(WETH), slippage, routes));
        calls[1] = abi.encodeWithSelector(auctionAutoCompounder.compound.selector);

        vm.startPrank(randomKeeper);
        auctionAutoCompounder.multicall(calls);

        assertEq(auctionAutoCompounder.keeperLastRun(), block.timestamp);
        // no reward given to caller this time- full amount deposited into mTokenId
        assertEq(VELO.balanceOf(address(owner)), veloBalanceBefore);
        assertEq(escrow.balanceOfNFT(mTokenId), balanceBefore + amountOut);
        assertEq(auctionAutoCompounder.amountTokenEarned(VelodromeTimeLibrary.epochStart(block.timestamp)), amountOut);
    }

    function testCannotSwapTokenToVELOKeeperIfFirstHourOfEpoch() public {
        address randomKeeper = address(0x123321);
        keeperRegistry.approve(address(randomKeeper));
        bytes[] memory calls = new bytes[](1);
        IRouter.Route[] memory optionalRoute = new IRouter.Route[](0);
        calls[0] = abi.encodeCall(auctionAutoCompounder.swapTokenToVELOWithOptionalRoute, (address(0), 0, optionalRoute));
        skipToNextEpoch(0);

        vm.startPrank(randomKeeper);
        vm.expectRevert(IAutoCompounder.TooSoon.selector);
        auctionAutoCompounder.swapTokenToVELOWithOptionalRoute(address(0), 0, optionalRoute);
        vm.expectRevert(IRelay.MulticallFailed.selector);
        auctionAutoCompounder.multicall(calls);

        skipToNextEpoch(1 hours - 1);

        vm.startPrank(randomKeeper);
        vm.expectRevert(IAutoCompounder.TooSoon.selector);
        auctionAutoCompounder.swapTokenToVELOWithOptionalRoute(address(0), 0, optionalRoute);
        vm.expectRevert(IRelay.MulticallFailed.selector);
        auctionAutoCompounder.multicall(calls);
    }

    function testCannotSwapTokenToVELOIfNotOnLastDayOfEpoch() external {
        bytes[] memory calls = new bytes[](1);
        IRouter.Route[] memory optionalRoute = new IRouter.Route[](0);
        calls[0] = abi.encodeCall(auctionAutoCompounder.swapTokenToVELOWithOptionalRoute, (address(0), 0, optionalRoute));
        skipToNextEpoch(0);
        // call with non owner nor keeper
        vm.startPrank(address(owner4));
        vm.expectRevert(IAutoCompounder.TooSoon.selector);
        auctionAutoCompounder.swapTokenToVELOWithOptionalRoute(address(0), 0, optionalRoute);
        vm.expectRevert(IRelay.MulticallFailed.selector);
        auctionAutoCompounder.multicall(calls);

        skipToNextEpoch(6 days - 1);
        vm.expectRevert(IAutoCompounder.TooSoon.selector);
        auctionAutoCompounder.swapTokenToVELOWithOptionalRoute(address(0), 0, optionalRoute);
        vm.expectRevert(IRelay.MulticallFailed.selector);
        auctionAutoCompounder.multicall(calls);
    }

    function testCannotRewardAndCompoundIfNotOnLastDayOfEpoch() external {
        skipToNextEpoch(0);
        vm.expectRevert(IAutoCompounder.TooSoon.selector);
        auctionAutoCompounder.rewardAndCompound();

        skipToNextEpoch(6 days - 1);
        vm.expectRevert(IAutoCompounder.TooSoon.selector);
        auctionAutoCompounder.rewardAndCompound();
    }

    function testCannotSwapIfSlippageTooHigh() public {
        address tokenToSwap = address(USDC);
        uint256 slippage = 501;
        IRouter.Route[] memory optionalRoute = new IRouter.Route[](0);
        vm.expectRevert(IAutoCompounder.SlippageTooHigh.selector);
        auctionAutoCompounder.swapTokenToVELOWithOptionalRoute(tokenToSwap, slippage, optionalRoute);
    }

    function testCannotSwapIfAmountInZero() public {
        IRouter.Route[] memory optionalRoute = new IRouter.Route[](0);
        vm.expectRevert(IAutoCompounder.AmountInZero.selector);
        auctionAutoCompounder.swapTokenToVELOWithOptionalRoute(address(USDC), 500, optionalRoute);
    }

    function testHandleRouterApproval() public {
        deal(address(FRAX), address(auctionAutoCompounder), TOKEN_1 / 1000, true);

        // give a fake approval to impersonate a dangling approved amount
        vm.prank(address(auctionAutoCompounder));
        FRAX.approve(address(router), 100);

        // resets and properly approves swap amount
        address tokenToSwap = address(FRAX);
        uint256 slippage = 500;

        IRouter.Route[] memory optionalRoute = new IRouter.Route[](0);
        auctionAutoCompounder.swapTokenToVELOWithOptionalRoute(tokenToSwap, slippage, optionalRoute);
        assertEq(FRAX.allowance(address(auctionAutoCompounder), address(router)), 0);
    }

    // TODO: order tests similar to AuctionAutoCompounder with section titles
    function testCannotSweepAfterFirstDayOfEpoch() public {
        skipToNextEpoch(1 days + 1);
        vm.expectRevert(IAutoCompounder.TooLate.selector);
        auctionAutoCompounder.sweep(tokensToSweep, recipients);
    }

    function testCannotSweepIfNotAdmin() public {
        skipToNextEpoch(1 days - 1);
        bytes memory revertString = bytes(
            "AccessControl: account 0x7d28001937fe8e131f76dae9e9947adedbd0abde is missing role 0x0000000000000000000000000000000000000000000000000000000000000000"
        );
        vm.startPrank(address(owner2));
        vm.expectRevert(revertString);
        auctionAutoCompounder.sweep(tokensToSweep, recipients);
        bytes[] memory calls = new bytes[](1);
        calls[0] = abi.encodeCall(auctionAutoCompounder.sweep, (tokensToSweep, recipients));
        vm.expectRevert(IRelay.MulticallFailed.selector);
        auctionAutoCompounder.multicall(calls);
    }

    function testCannotSweepUnequalLengths() public {
        skipToNextEpoch(1 days - 1);
        recipients.push(address(owner2));
        assertTrue(tokensToSweep.length != recipients.length);
        vm.prank(escrow.team());
        vm.expectRevert(IAutoCompounder.UnequalLengths.selector);
        auctionAutoCompounder.sweep(tokensToSweep, recipients);
    }

    function testCannotSweepHighLiquidityToken() public {
        skipToNextEpoch(1 days - 1);
        tokensToSweep.push(address(USDC));
        recipients.push(address(owner2));
        vm.prank(escrow.team());
        auctionAutoCompounderFactory.addHighLiquidityToken(address(USDC));
        vm.expectRevert(IAutoCompounder.HighLiquidityToken.selector);
        auctionAutoCompounder.sweep(tokensToSweep, recipients);
    }

    function testCannotSweepZeroAddressRecipient() public {
        skipToNextEpoch(1 days - 1);
        tokensToSweep.push(address(USDC));
        recipients.push(address(0));
        vm.prank(escrow.team());
        vm.expectRevert(IRelay.ZeroAddress.selector);
        auctionAutoCompounder.sweep(tokensToSweep, recipients);
    }

    function testSweep() public {
        skipToNextEpoch(1 days - 1);
        tokensToSweep.push(address(USDC));
        recipients.push(address(owner2));
        deal(address(USDC), address(auctionAutoCompounder), USDC_1);
        uint256 balanceBefore = USDC.balanceOf(address(owner2));
        vm.prank(escrow.team());
        auctionAutoCompounder.sweep(tokensToSweep, recipients);
        assertEq(USDC.balanceOf(address(owner2)), balanceBefore + USDC_1);
    }

    function testName() public {
        // Create auctionAutoCompounder with a name
        vm.prank(escrow.allowedManager());
        mTokenId = escrow.createManagedLockFor(address(owner));

        vm.startPrank(address(owner));
        escrow.approve(address(auctionAutoCompounderFactory), mTokenId);
        escrow.setApprovalForAll(address(owner2), true);
        vm.stopPrank();
        vm.prank(address(owner2));
        auctionAutoCompounder = AuctionAutoCompounder(
            auctionAutoCompounderFactory.createRelay(address(owner), mTokenId, "Test", new bytes(0))
        );

        assertEq(auctionAutoCompounder.name(), "Test");

        // Create an auctionAutoCompounder without a name
        vm.prank(escrow.allowedManager());
        mTokenId = escrow.createManagedLockFor(address(owner));

        vm.startPrank(address(owner));
        escrow.approve(address(auctionAutoCompounderFactory), mTokenId);
        escrow.setApprovalForAll(address(owner2), true);
        vm.stopPrank();
        vm.prank(address(owner2));
        auctionAutoCompounder = AuctionAutoCompounder(auctionAutoCompounderFactory.createRelay(address(owner), mTokenId, "", new bytes(0)));

        assertEq(auctionAutoCompounder.name(), "");
    }

    function testSetName() public {
        assertEq(auctionAutoCompounder.name(), "");
        vm.startPrank(address(owner));
        auctionAutoCompounder.setName("New name");
        assertEq(auctionAutoCompounder.name(), "New name");
        auctionAutoCompounder.setName("Second new name");
        assertEq(auctionAutoCompounder.name(), "Second new name");
    }

    function testCannotSetNameIfNotAdmin() public {
        bytes memory revertString = bytes(
            "AccessControl: account 0x7d28001937fe8e131f76dae9e9947adedbd0abde is missing role 0x0000000000000000000000000000000000000000000000000000000000000000"
        );
        vm.startPrank(address(owner2));
        vm.expectRevert(revertString);
        auctionAutoCompounder.setName("Some totally new name");
    }

    function testCannotSetOptimizerIfNotApproved() public {
        address unapprovedOptimizer = vm.addr(0x123);
        vm.expectRevert(IRelay.OptimizerNotApproved.selector);
        auctionAutoCompounder.setOptimizer(unapprovedOptimizer);
    }

    function testCannotSetOptimizerToZeroAddress() public {
        vm.expectRevert(IRelay.ZeroAddress.selector);
        auctionAutoCompounder.setOptimizer(address(0));
    }

    function testSetOptimizer() public {
        address approvedOptimizer = vm.addr(0x123);
        optimizerRegistry.approve(approvedOptimizer);
        auctionAutoCompounder.setOptimizer(approvedOptimizer);
        assertEq(address(auctionAutoCompounder.optimizer()), approvedOptimizer);
    }

    function testCannotSetOptimizerIfNotAdmin() public {
        address approvedOptimizer = vm.addr(0x123);
        optimizerRegistry.approve(approvedOptimizer);
        bytes memory revertString = bytes(
            "AccessControl: account 0x7d28001937fe8e131f76dae9e9947adedbd0abde is missing role 0x0000000000000000000000000000000000000000000000000000000000000000"
        );
        vm.prank(address(owner2));
        vm.expectRevert(revertString);
        auctionAutoCompounder.setOptimizer(approvedOptimizer);
    }
}
